import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";
import { RevitConnection } from "../utils/revitConnection.js";

const revitConnection = new RevitConnection();

interface DynamicCommandArgs {
  command_description: string;
  complexity_level: "simple" | "moderate" | "complex" | "advanced";
  safety_mode: boolean;
  optimization_level: "speed" | "quality" | "balanced";
  parameters?: Record<string, any>;
}

interface PipeCommandArgs {
  start_point: { x: number; y: number; z: number };
  end_point: { x: number; y: number; z: number };
  diameter: number;
  system_type?: string;
}

export function registerSmartRevitTools(server: McpServer) {
  
  // ====== –ù–û–í–´–ô –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ò–ù–°–¢–†–£–ú–ï–ù–¢ –î–õ–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–• –ö–û–ú–ê–ù–î ======
  server.tool(
    "execute_dynamic_revit_command",
    "üöÄ Execute ANY Revit command described in natural language with dynamic code generation! This is the most powerful tool that can handle any complex MEP, architectural, or engineering task.",
    {
      command_description: z.string().describe("Natural language description of what you want to do in Revit (in Russian or English). Examples: '–°–æ–∑–¥–∞–π —Å–∏—Å—Ç–µ–º—É –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏ –¥–ª—è –æ—Ñ–∏—Å–∞', 'Create smart ductwork avoiding obstacles', 'Optimize existing MEP systems for energy efficiency'"),
      complexity_level: z.enum(["simple", "moderate", "complex", "advanced"]).default("moderate").describe("Complexity level affects execution time and resource usage"),
      safety_mode: z.boolean().default(true).describe("Enable additional safety checks and validation"),
      optimization_level: z.enum(["speed", "quality", "balanced"]).default("balanced").describe("Optimization focus: speed for quick results, quality for best output, balanced for both"),
      parameters: z.record(z.any()).optional().describe("Additional parameters as key-value pairs (coordinates, sizes, etc.)")
    },
    async (args: DynamicCommandArgs) => {
      try {
        const response = await revitConnection.sendCommand("execute_dynamic_command", {
          description: args.command_description,
          complexity: args.complexity_level,
          safety: args.safety_mode,
          optimization: args.optimization_level,
          params: args.parameters
        });

        if (response.success) {
          return {
            content: [{
              type: "text",
              text: `‚úÖ **–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n` +
                    `üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n${response.result}\n\n` +
                    `‚è±Ô∏è **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** ${response.executionTime}–º—Å\n` +
                    `üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:** ${response.message}`
            }]
          };
        } else {
          return {
            content: [{
              type: "text",
              text: `‚ùå **–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:** ${response.error}`
            }]
          };
        }
      } catch (error) {
        return {
          content: [{
            type: "text",
            text: `üí• **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:** ${error instanceof Error ? error.message : String(error)}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Revit.`
          }]
        };
      }
    }
  );

  // ====== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ======
  
  server.tool(
    "smart_create_pipe",
    "Create intelligent piping with optimal routing and system integration",
    {
      start_point: z.object({
        x: z.number(),
        y: z.number(),
        z: z.number()
      }).describe("Starting point coordinates in Revit units"),
      end_point: z.object({
        x: z.number(),
        y: z.number(),
        z: z.number()
      }).describe("Ending point coordinates in Revit units"),
      diameter: z.number().default(0.5).describe("Pipe diameter in feet"),
      system_type: z.string().optional().describe("Plumbing system type")
    },
    async (args: PipeCommandArgs) => {
      try {
        const response = await revitConnection.sendCommand("smart_create_pipe", {
          start: args.start_point,
          end: args.end_point,
          diameter: args.diameter,
          systemType: args.system_type
        });

        if (response.success) {
          return {
            content: [{
              type: "text",
              text: `‚úÖ **–£–º–Ω—ã–π —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥ —Å–æ–∑–¥–∞–Ω!**\n\n` +
                    `üìè **–ü—É—Ç—å:** ${response.route.path.length} —Å–µ–≥–º–µ–Ω—Ç–æ–≤\n` +
                    `üîß **–§–∏—Ç–∏–Ω–≥–∏:** ${response.route.fittings.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n` +
                    `üìê **–î–ª–∏–Ω–∞:** ${response.route.totalLength.toFixed(2)} —Ñ—É—Ç–æ–≤\n` +
                    `üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:** ${response.message}`
            }]
          };
        } else {
          return {
            content: [{
              type: "text",
              text: `‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞:** ${response.error}`
            }]
          };
        }
      } catch (error) {
        return {
          content: [{
            type: "text",
            text: `üí• **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:** ${error instanceof Error ? error.message : String(error)}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Revit.`
          }]
        };
      }
    }
  );

  server.tool(
    "smart_create_duct",
    "Create intelligent ductwork with advanced pathfinding and obstacle avoidance",
    {
      start_point: z.object({
        x: z.number(),
        y: z.number(), 
        z: z.number()
      }).describe("Starting point coordinates in Revit units"),
      end_point: z.object({
        x: z.number(),
        y: z.number(),
        z: z.number()
      }).describe("Ending point coordinates in Revit units"),
      width: z.number().default(1.0).describe("Duct width in feet"),
      height: z.number().default(0.5).describe("Duct height in feet"),
      system_type: z.string().optional().describe("HVAC system type")
    },
    async (args) => {
      try {
        const response = await revitConnection.sendCommand("smart_create_duct", {
          start: args.start_point,
          end: args.end_point,
          width: args.width,
          height: args.height,
          systemType: args.system_type
        });

        if (response.success) {
          return {
            content: [{
              type: "text",
              text: `‚úÖ **–£–º–Ω—ã–π –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥ —Å–æ–∑–¥–∞–Ω!**\n\n` +
                    `üìè **–ü—É—Ç—å:** ${response.route.path.length} —Å–µ–≥–º–µ–Ω—Ç–æ–≤\n` +
                    `üîß **–§–∏—Ç–∏–Ω–≥–∏:** ${response.route.fittings.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n` +
                    `üìê **–î–ª–∏–Ω–∞:** ${response.route.totalLength.toFixed(2)} —Ñ—É—Ç–æ–≤\n` +
                    `üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:** ${response.message}`
            }]
          };
        } else {
          return {
            content: [{
              type: "text", 
              text: `‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–∞:** ${response.error}`
            }]
          };
        }
      } catch (error) {
        return {
          content: [{
            type: "text",
            text: `üí• **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:** ${error instanceof Error ? error.message : String(error)}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Revit.`
          }]
        };
      }
    }
  );

  server.tool(
    "analyze_building_space",
    "Analyze building space for optimal MEP equipment placement and routing",
    {
      center_point: z.object({
        x: z.number(),
        y: z.number(),
        z: z.number()
      }).optional().describe("Center point for analysis (optional, uses model center if not provided)"),
      radius: z.number().default(10.0).describe("Analysis radius in feet"),
      analysis_type: z.enum(["general", "hvac", "plumbing", "electrical"]).default("general").describe("Type of analysis to perform")
    },
    async (args) => {
      try {
        const response = await revitConnection.sendCommand("analyze_space", {
          center: args.center_point,
          radius: args.radius,
          type: args.analysis_type
        });

        if (response.success) {
          return {
            content: [{
              type: "text",
              text: `üìä **–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n` +
                    `üìç **–¶–µ–Ω—Ç—Ä –∞–Ω–∞–ª–∏–∑–∞:** ${response.analysis.center.x.toFixed(1)}, ${response.analysis.center.y.toFixed(1)}, ${response.analysis.center.z.toFixed(1)}\n` +
                    `üìè **–†–∞–¥–∏—É—Å:** ${response.analysis.radius} —Ñ—É—Ç–æ–≤\n` +
                    `üèóÔ∏è **–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:** ${response.analysis.elementCount}\n` +
                    `‚úÖ **–°–≤–æ–±–æ–¥–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ:** ${response.analysis.isSpaceAvailable ? '–î–∞' : '–ù–µ—Ç'}\n\n` +
                    `**–ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:**\n` +
                    `${response.analysis.elements.map((e: any) => `‚Ä¢ ${e.category}: ${e.name} (ID: ${e.id})`).join('\n')}`
            }]
          };
        } else {
          return {
            content: [{
              type: "text",
              text: `‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:** ${response.error}`
            }]
          };
        }
      } catch (error) {
        return {
          content: [{
            type: "text",
            text: `üí• **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:** ${error instanceof Error ? error.message : String(error)}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Revit.`
          }]
        };
      }
    }
  );

  server.tool(
    "find_optimal_route",
    "Find optimal routing path between two points with obstacle avoidance",
    {
      start_point: z.object({
        x: z.number(),
        y: z.number(),
        z: z.number()
      }).describe("Starting point coordinates"),
      end_point: z.object({
        x: z.number(),
        y: z.number(),
        z: z.number()
      }).describe("Ending point coordinates"),
      clearance: z.number().default(0.5).describe("Required clearance around route in feet"),
      route_type: z.enum(["duct", "pipe", "cable", "general"]).default("general").describe("Type of route to optimize for")
    },
    async (args) => {
      try {
        const response = await revitConnection.sendCommand("find_optimal_route", {
          start: args.start_point,
          end: args.end_point,
          clearance: args.clearance,
          type: args.route_type
        });

        if (response.success) {
          return {
            content: [{
              type: "text",
              text: `üó∫Ô∏è **–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –Ω–∞–π–¥–µ–Ω!**\n\n` +
                    `üìè **–û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å:** ${response.routing.optimalPath.length} —Ç–æ—á–µ–∫\n` +
                    `üîÄ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:** ${response.routing.alternativePaths.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n` +
                    `üõ°Ô∏è **–ó–∞–∑–æ—Ä:** ${response.routing.clearance} —Ñ—É—Ç–æ–≤\n\n` +
                    `**–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—É—Ç–∏:**\n`