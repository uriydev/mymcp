import { z } from "zod";
import { RevitConnection } from "../utils/revitConnection.js";
const revitConnection = new RevitConnection();
export function registerSmartRevitTools(server) {
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    server.tool("execute_dynamic_revit_command", "üöÄ Execute ANY Revit command described in natural language with dynamic code generation! This is the most powerful tool that can handle any complex MEP, architectural, or engineering task.", {
        command_description: z.string().describe("Natural language description of what you want to do in Revit (in Russian or English). Examples: '–°–æ–∑–¥–∞–π —Å–∏—Å—Ç–µ–º—É –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏ –¥–ª—è –æ—Ñ–∏—Å–∞', 'Create smart ductwork avoiding obstacles', 'Optimize existing MEP systems for energy efficiency'"),
        complexity_level: z.enum(["simple", "moderate", "complex", "advanced"]).default("moderate").describe("Complexity level affects execution time and resource usage"),
        safety_mode: z.boolean().default(true).describe("Enable additional safety checks and validation"),
        optimization_level: z.enum(["speed", "quality", "balanced"]).default("balanced").describe("Optimization focus: speed for quick results, quality for best output, balanced for both"),
        parameters: z.record(z.any()).optional().describe("Additional parameters as key-value pairs (coordinates, sizes, etc.)")
    }, async (args) => {
        try {
            const response = await revitConnection.sendCommand("execute_dynamic_command", {
                description: args.command_description,
                complexity: args.complexity_level,
                safety: args.safety_mode,
                optimization: args.optimization_level,
                params: args.parameters
            });
            if (response.success) {
                return {
                    content: [{
                            type: "text",
                            text: `‚úÖ **–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n` +
                                `üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n${response.result}\n\n` +
                                `‚è±Ô∏è **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** ${response.executionTime}–º—Å\n` +
                                `üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:** ${response.message}`
                        }]
                };
            }
            else {
                return {
                    content: [{
                            type: "text",
                            text: `‚ùå **–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:** ${response.error}`
                        }]
                };
            }
        }
        catch (error) {
            return {
                content: [{
                        type: "text",
                        text: `üí• **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:** ${error instanceof Error ? error.message : String(error)}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Revit.`
                    }]
            };
        }
    });
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Revit
    server.tool("revit_health_check", "Check connection status and system health with Revit", {}, async () => {
        try {
            const response = await revitConnection.sendCommand("health_check", {});
            if (response.success) {
                return {
                    content: [{
                            type: "text",
                            text: `üü¢ **–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!**\n\n` +
                                `üîå **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Revit:** ‚úÖ –ê–∫—Ç–∏–≤–Ω–æ\n` +
                                `üìÑ **–î–æ–∫—É–º–µ–Ω—Ç:** ${response.status.documentName}\n` +
                                `üïê **–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:** ${new Date(response.status.timestamp).toLocaleString('ru-RU')}\n` +
                                `üì¶ **–í–µ—Ä—Å–∏—è:** ${response.status.version}\n\n` +
                                `üöÄ **–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:** ${response.status.dynamicCommands?.enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n` +
                                `üíæ **–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:** ${response.status.dynamicCommands?.cachedCommands || 0}\n` +
                                `‚úÖ **–í–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:** ${response.status.dynamicCommands?.validCommands || 0}\n\n` +
                                `üéØ **–ì–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –ª—é–±—ã—Ö –∫–æ–º–∞–Ω–¥!**`
                        }]
                };
            }
            else {
                return {
                    content: [{
                            type: "text",
                            text: `üü° **–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º**\n\n‚ùå ${response.error}`
                        }]
                };
            }
        }
        catch (error) {
            return {
                content: [{
                        type: "text",
                        text: `üî¥ **Revit –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n` +
                            `‚ùó –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}\n\n` +
                            `üîß **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:**\n` +
                            `‚Ä¢ Revit –∑–∞–ø—É—â–µ–Ω\n` +
                            `‚Ä¢ –ü–ª–∞–≥–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω\n` +
                            `‚Ä¢ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω\n` +
                            `‚Ä¢ –ü–æ—Ä—Ç 3001 —Å–≤–æ–±–æ–¥–µ–Ω`
                    }]
            };
        }
    });
    // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –∫–æ–º–∞–Ω–¥
    server.tool("clear_command_cache", "üßπ Clear the dynamic command cache to force regeneration of commands with latest code improvements", {
        force_clear: z.boolean().default(false).describe("Force clear all cached commands")
    }, async (args) => {
        try {
            const response = await revitConnection.sendCommand("clear_command_cache", {
                force: args.force_clear
            });
            if (response.success) {
                return {
                    content: [{
                            type: "text",
                            text: `üßπ **–ö—ç—à –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n` +
                                `üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:** ${response.result}\n\n` +
                                `üí¨ **–î–µ—Ç–∞–ª–∏:** ${response.message}\n\n` +
                                `üîÑ **–¢–µ–ø–µ—Ä—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π**`
                        }]
                };
            }
            else {
                return {
                    content: [{
                            type: "text",
                            text: `‚ùå **–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞**\n\n` +
                                `üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:** ${response.message}`
                        }]
                };
            }
        }
        catch (error) {
            return {
                content: [{
                        type: "text",
                        text: `üî¥ **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Revit**\n\n` +
                            `‚ùó –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`
                    }]
            };
        }
    });
}
//# sourceMappingURL=smartRevitTools.js.map