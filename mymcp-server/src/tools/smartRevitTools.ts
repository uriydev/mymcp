import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";
import { RevitConnection } from "../utils/revitConnection.js";

const revitConnection = new RevitConnection();

interface DynamicCommandArgs {
  command_description: string;
  complexity_level: "simple" | "moderate" | "complex" | "advanced";
  safety_mode: boolean;
  optimization_level: "speed" | "quality" | "balanced";
  parameters?: Record<string, any>;
}

export function registerSmartRevitTools(server: McpServer) {
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
  server.tool(
    "execute_dynamic_revit_command",
    "üöÄ Execute ANY Revit command described in natural language with dynamic code generation! This is the most powerful tool that can handle any complex MEP, architectural, or engineering task.",
    {
      command_description: z.string().describe("Natural language description of what you want to do in Revit (in Russian or English). Examples: '–°–æ–∑–¥–∞–π —Å–∏—Å—Ç–µ–º—É –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏ –¥–ª—è –æ—Ñ–∏—Å–∞', 'Create smart ductwork avoiding obstacles', 'Optimize existing MEP systems for energy efficiency'"),
      complexity_level: z.enum(["simple", "moderate", "complex", "advanced"]).default("moderate").describe("Complexity level affects execution time and resource usage"),
      safety_mode: z.boolean().default(true).describe("Enable additional safety checks and validation"),
      optimization_level: z.enum(["speed", "quality", "balanced"]).default("balanced").describe("Optimization focus: speed for quick results, quality for best output, balanced for both"),
      parameters: z.record(z.any()).optional().describe("Additional parameters as key-value pairs (coordinates, sizes, etc.)")
    },
    async (args: DynamicCommandArgs) => {
      try {
        const response = await revitConnection.sendCommand("execute_dynamic_command", {
          description: args.command_description,
          complexity: args.complexity_level,
          safety: args.safety_mode,
          optimization: args.optimization_level,
          params: args.parameters
        });

        if (response.success) {
          return {
            content: [{
              type: "text",
              text: `‚úÖ **–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n` +
                    `üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n${response.result}\n\n` +
                    `‚è±Ô∏è **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** ${response.executionTime}–º—Å\n` +
                    `üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:** ${response.message}`
            }]
          };
        } else {
          return {
            content: [{
              type: "text",
              text: `‚ùå **–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:** ${response.error}`
            }]
          };
        }
      } catch (error) {
        return {
          content: [{
            type: "text",
            text: `üí• **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:** ${error instanceof Error ? error.message : String(error)}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Revit.`
          }]
        };
      }
    }
  );

  // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
  server.tool(
    "clear_command_cache",
    "üßπ Clear the dynamic command cache to force regeneration of commands with latest code improvements",
    {
      force_clear: z.boolean().default(false).describe("Force clear all cached commands")
    },
    async (args: { force_clear?: boolean }) => {
      try {
        const response = await revitConnection.sendCommand("clear_command_cache", {
          force_clear: args.force_clear || false
        });

        if (response.success) {
          return {
            content: [{
              type: "text",
              text: `‚úÖ **–ö—ç—à –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–µ–Ω!**\n\n` +
                    `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n` +
                    `‚Ä¢ **–£–¥–∞–ª–µ–Ω–æ –∫–æ–º–∞–Ω–¥:** ${response.statistics.commandsRemoved}\n` +
                    `‚Ä¢ **–ë—ã–ª–æ –≤–∞–ª–∏–¥–Ω—ã—Ö:** ${response.statistics.before.validCommands}\n` +
                    `‚Ä¢ **–í–æ–∑—Ä–∞—Å—Ç —Å—Ç–∞—Ä–µ–π—à–µ–π –∫–æ–º–∞–Ω–¥—ã:** ${response.statistics.before.oldestCommandAge.toFixed(1)} –º–∏–Ω\n\n` +
                    `üíæ **–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:**\n` +
                    `‚Ä¢ **–ö–æ–º–∞–Ω–¥ –≤ –∫—ç—à–µ:** ${response.statistics.after.totalCommands}\n` +
                    `‚Ä¢ **–í–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:** ${response.statistics.after.validCommands}\n\n` +
                    `‚è∞ **–í—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏:** ${new Date(response.timestamp).toLocaleString('ru-RU')}\n` +
                    `üîÑ **–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞:** ${response.forceClear ? '–î–∞' : '–ù–µ—Ç'}\n\n` +
                    `‚ú® **–í—Å–µ –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω—ã —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏!**`
            }]
          };
        } else {
          return {
            content: [{
              type: "text",
              text: `‚ùå **–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:** ${response.error}`
            }]
          };
        }
      } catch (error) {
        return {
          content: [{
            type: "text",
            text: `üí• **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:** ${error instanceof Error ? error.message : String(error)}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Revit.`
          }]
        };
      }
    }
  );

  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Revit
  server.tool(
    "revit_health_check",
    "Check connection status and system health with Revit",
    {
      random_string: z.string().optional().describe("Dummy parameter for no-parameter tools")
    },
    async (args: { random_string?: string }) => {
      try {
        const response = await revitConnection.sendCommand("health_check", {});
        if (response.success) {
          return {
            content: [{
              type: "text",
              text: `üü¢ **–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!**\n\n` +
                    `üîå **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Revit:** ‚úÖ –ê–∫—Ç–∏–≤–Ω–æ\n` +
                    `üìÑ **–î–æ–∫—É–º–µ–Ω—Ç:** ${response.status.documentName}\n` +
                    `üïê **–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:** ${new Date(response.status.timestamp).toLocaleString('ru-RU')}\n` +
                    `üì¶ **–í–µ—Ä—Å–∏—è:** ${response.status.version}\n\n` +
                    `üöÄ **–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:** ${response.status.dynamicCommands?.enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n` +
                    `üíæ **–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:** ${response.status.dynamicCommands?.cachedCommands || 0}\n` +
                    `‚úÖ **–í–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:** ${response.status.dynamicCommands?.validCommands || 0}\n\n` +
                    `üéØ **–ì–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –ª—é–±—ã—Ö –∫–æ–º–∞–Ω–¥!**`
            }]
          };
        } else {
          return {
            content: [{
              type: "text",
              text: `üü° **–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º**\n\n‚ùå ${response.error}`
            }]
          };
        }
      } catch (error) {
        return {
          content: [{
            type: "text",
            text: `üî¥ **Revit –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n` +
                  `‚ùó –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}\n\n` +
                  `üîß **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:**\n` +
                  `‚Ä¢ Revit –∑–∞–ø—É—â–µ–Ω\n` +
                  `‚Ä¢ –ü–ª–∞–≥–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω\n` +
                  `‚Ä¢ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω\n` +
                  `‚Ä¢ –ü–æ—Ä—Ç 3001 —Å–≤–æ–±–æ–¥–µ–Ω`
          }]
        };
      }
    }
  );
}