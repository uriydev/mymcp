import { z } from "zod";
import { RevitConnection } from "../utils/revitConnection.js";
const revitConnection = new RevitConnection();
export function registerSmartRevitTools(server) {
    // ====== –ù–û–í–´–ô –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ò–ù–°–¢–†–£–ú–ï–ù–¢ –î–õ–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–• –ö–û–ú–ê–ù–î ======
    server.tool("execute_dynamic_revit_command", "üöÄ Execute ANY Revit command described in natural language with dynamic code generation! This is the most powerful tool that can handle any complex MEP, architectural, or engineering task.", {
        command_description: z.string().describe("Natural language description of what you want to do in Revit (in Russian or English). Examples: '–°–æ–∑–¥–∞–π —Å–∏—Å—Ç–µ–º—É –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏ –¥–ª—è –æ—Ñ–∏—Å–∞', 'Create smart ductwork avoiding obstacles', 'Optimize existing MEP systems for energy efficiency'"),
        complexity_level: z.enum(["simple", "moderate", "complex", "advanced"]).default("moderate").describe("Complexity level affects execution time and resource usage"),
        safety_mode: z.boolean().default(true).describe("Enable additional safety checks and validation"),
        optimization_level: z.enum(["speed", "quality", "balanced"]).default("balanced").describe("Optimization focus: speed for quick results, quality for best output, balanced for both"),
        parameters: z.record(z.any()).optional().describe("Additional parameters as key-value pairs (coordinates, sizes, etc.)")
    }, async (args) => {
        try {
            const response = await revitConnection.sendCommand("execute_dynamic_command", {
                description: args.command_description,
                complexity: args.complexity_level,
                safety: args.safety_mode,
                optimization: args.optimization_level,
                parameters: args.parameters || {}
            });
            if (response.success) {
                return {
                    content: [{
                            type: "text",
                            text: `üéØ **–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n` +
                                `üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** ${args.command_description}\n` +
                                `‚öôÔ∏è **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–¥–∞:** ${response.generatedLines || 0} —Å—Ç—Ä–æ–∫\n` +
                                `‚è±Ô∏è **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** ${response.executionTime || 0}–º—Å\n` +
                                `üìä **–°–ª–æ–∂–Ω–æ—Å—Ç—å:** ${args.complexity_level}\n` +
                                `üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** ${args.safety_mode ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}\n` +
                                `üéõÔ∏è **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:** ${args.optimization_level}\n\n` +
                                `‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** ${response.message}\n\n` +
                                `${response.details || '–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'}\n\n` +
                                `${response.warnings && response.warnings.length > 0 ?
                                    `‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n${response.warnings.map((w) => `‚Ä¢ ${w}`).join('\n')}\n\n` : ''}` +
                                `üÜî **–≠–ª–µ–º–µ–Ω—Ç—ã:** —Å–æ–∑–¥–∞–Ω–æ ${response.elementsCreated || 0}, –∏–∑–º–µ–Ω–µ–Ω–æ ${response.elementsModified || 0}`
                        }]
                };
            }
            else {
                return {
                    content: [{
                            type: "text",
                            text: `‚ùå **–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã**\n\n` +
                                `üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** ${args.command_description}\n` +
                                `‚ùó **–û—à–∏–±–∫–∞:** ${response.error}\n` +
                                `‚è±Ô∏è **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** ${response.executionTime || 0}–º—Å\n\n` +
                                `${response.warnings && response.warnings.length > 0 ?
                                    `‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n${response.warnings.map((w) => `‚Ä¢ ${w}`).join('\n')}` : ''}`
                        }]
                };
            }
        }
        catch (error) {
            return {
                content: [{
                        type: "text",
                        text: `üí• **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã**\n\n` +
                            `üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** ${args.command_description}\n` +
                            `‚ùó **–û—à–∏–±–∫–∞:** ${error instanceof Error ? error.message : String(error)}\n\n` +
                            `üîß **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n` +
                            `‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Revit\n` +
                            `‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–∫—Ä—ã—Ç\n` +
                            `‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ`
                    }]
            };
        }
    });
    // ====== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ======
    server.tool("smart_create_duct", "Create intelligent ductwork with advanced pathfinding and obstacle avoidance", {
        start_point: z.object({
            x: z.number(),
            y: z.number(),
            z: z.number()
        }).describe("Starting point coordinates in Revit units"),
        end_point: z.object({
            x: z.number(),
            y: z.number(),
            z: z.number()
        }).describe("Ending point coordinates in Revit units"),
        width: z.number().default(1.0).describe("Duct width in feet"),
        height: z.number().default(0.5).describe("Duct height in feet"),
        system_type: z.string().optional().describe("HVAC system type")
    }, async (args) => {
        try {
            const response = await revitConnection.sendCommand("smart_create_duct", {
                start: args.start_point,
                end: args.end_point,
                width: args.width,
                height: args.height,
                systemType: args.system_type
            });
            if (response.success) {
                return {
                    content: [{
                            type: "text",
                            text: `‚úÖ **–£–º–Ω—ã–π –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥ —Å–æ–∑–¥–∞–Ω!**\n\n` +
                                `üìè **–ü—É—Ç—å:** ${response.route.path.length} —Å–µ–≥–º–µ–Ω—Ç–æ–≤\n` +
                                `üîß **–§–∏—Ç–∏–Ω–≥–∏:** ${response.route.fittings.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n` +
                                `üìê **–î–ª–∏–Ω–∞:** ${response.route.totalLength.toFixed(2)} —Ñ—É—Ç–æ–≤\n` +
                                `üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:** ${response.message}`
                        }]
                };
            }
            else {
                return {
                    content: [{
                            type: "text",
                            text: `‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–∞:** ${response.error}`
                        }]
                };
            }
        }
        catch (error) {
            return {
                content: [{
                        type: "text",
                        text: `üí• **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:** ${error instanceof Error ? error.message : String(error)}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Revit.`
                    }]
            };
        }
    });
    server.tool("smart_create_pipe", "Create intelligent piping with optimal routing and system integration", {
        start_point: z.object({
            x: z.number(),
            y: z.number(),
            z: z.number()
        }).describe("Starting point coordinates in Revit units"),
        end_point: z.object({
            x: z.number(),
            y: z.number(),
            z: z.number()
        }).describe("Ending point coordinates in Revit units"),
        diameter: z.number().default(0.5).describe("Pipe diameter in feet"),
        system_type: z.string().optional().describe("Plumbing system type")
    }, async (args) => {
        try {
            const response = await revitConnection.sendCommand("smart_create_pipe", {
                start: args.start_point,
                end: args.end_point,
                diameter: args.diameter,
                systemType: args.system_type
            });
            if (response.success) {
                return {
                    content: [{
                            type: "text",
                            text: `‚úÖ **–£–º–Ω—ã–π —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥ —Å–æ–∑–¥–∞–Ω!**\n\n` +
                                `üìè **–ü—É—Ç—å:** ${response.route.path.length} —Å–µ–≥–º–µ–Ω—Ç–æ–≤\n` +
                                `üîß **–§–∏—Ç–∏–Ω–≥–∏:** ${response.route.fittings.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n` +
                                `üìê **–î–ª–∏–Ω–∞:** ${response.route.totalLength.toFixed(2)} —Ñ—É—Ç–æ–≤\n` +
                                `üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:** ${response.message}`
                        }]
                };
            }
            else {
                return {
                    content: [{
                            type: "text",
                            text: `‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞:** ${response.error}`
                        }]
                };
            }
        }
        catch (error) {
            return {
                content: [{
                        type: "text",
                        text: `üí• **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:** ${error instanceof Error ? error.message : String(error)}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Revit.`
                    }]
            };
        }
    });
    server.tool("analyze_building_space", "Analyze building space for optimal MEP equipment placement and routing", {
        center_point: z.object({
            x: z.number(),
            y: z.number(),
            z: z.number()
        }).optional().describe("Center point for analysis (optional, uses model center if not provided)"),
        radius: z.number().default(10.0).describe("Analysis radius in feet"),
        analysis_type: z.enum(["general", "hvac", "plumbing", "electrical"]).default("general").describe("Type of analysis to perform")
    }, async (args) => {
        try {
            const response = await revitConnection.sendCommand("analyze_space", {
                center: args.center_point,
                radius: args.radius,
                type: args.analysis_type
            });
            if (response.success) {
                return {
                    content: [{
                            type: "text",
                            text: `üìä **–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n` +
                                `üìç **–¶–µ–Ω—Ç—Ä –∞–Ω–∞–ª–∏–∑–∞:** ${response.analysis.center.x.toFixed(1)}, ${response.analysis.center.y.toFixed(1)}, ${response.analysis.center.z.toFixed(1)}\n` +
                                `üìè **–†–∞–¥–∏—É—Å:** ${response.analysis.radius} —Ñ—É—Ç–æ–≤\n` +
                                `üèóÔ∏è **–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:** ${response.analysis.elementCount}\n` +
                                `‚úÖ **–°–≤–æ–±–æ–¥–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ:** ${response.analysis.isSpaceAvailable ? '–î–∞' : '–ù–µ—Ç'}\n\n` +
                                `**–ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:**\n` +
                                `${response.analysis.elements.map((e) => `‚Ä¢ ${e.category}: ${e.name} (ID: ${e.id})`).join('\n')}`
                        }]
                };
            }
            else {
                return {
                    content: [{
                            type: "text",
                            text: `‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:** ${response.error}`
                        }]
                };
            }
        }
        catch (error) {
            return {
                content: [{
                        type: "text",
                        text: `üí• **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:** ${error instanceof Error ? error.message : String(error)}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Revit.`
                    }]
            };
        }
    });
    server.tool("find_optimal_route", "Find optimal routing path between two points with obstacle avoidance", {
        start_point: z.object({
            x: z.number(),
            y: z.number(),
            z: z.number()
        }).describe("Starting point coordinates"),
        end_point: z.object({
            x: z.number(),
            y: z.number(),
            z: z.number()
        }).describe("Ending point coordinates"),
        clearance: z.number().default(0.5).describe("Required clearance around route in feet"),
        route_type: z.enum(["duct", "pipe", "cable", "general"]).default("general").describe("Type of route to optimize for")
    }, async (args) => {
        try {
            const response = await revitConnection.sendCommand("find_optimal_route", {
                start: args.start_point,
                end: args.end_point,
                clearance: args.clearance,
                type: args.route_type
            });
            if (response.success) {
                return {
                    content: [{
                            type: "text",
                            text: `üó∫Ô∏è **–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –Ω–∞–π–¥–µ–Ω!**\n\n` +
                                `üìè **–û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å:** ${response.routing.optimalPath.length} —Ç–æ—á–µ–∫\n` +
                                `üîÄ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:** ${response.routing.alternativePaths.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n` +
                                `üõ°Ô∏è **–ó–∞–∑–æ—Ä:** ${response.routing.clearance} —Ñ—É—Ç–æ–≤\n\n` +
                                `**–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—É—Ç–∏:**\n` +
                                `${response.routing.optimalPath.slice(0, 5).map((p, i) => `${i + 1}. (${p.x.toFixed(1)}, ${p.y.toFixed(1)}, ${p.z.toFixed(1)})`).join('\n')}` +
                                `${response.routing.optimalPath.length > 5 ? `\n... –∏ –µ—â–µ ${response.routing.optimalPath.length - 5} —Ç–æ—á–µ–∫` : ''}`
                        }]
                };
            }
            else {
                return {
                    content: [{
                            type: "text",
                            text: `‚ùå **–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞:** ${response.error}`
                        }]
                };
            }
        }
        catch (error) {
            return {
                content: [{
                        type: "text",
                        text: `üí• **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:** ${error instanceof Error ? error.message : String(error)}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Revit.`
                    }]
            };
        }
    });
    server.tool("revit_health_check", "Check connection status and system health with Revit", {}, async (args) => {
        try {
            const response = await revitConnection.sendCommand("health_check", {});
            if (response.success) {
                return {
                    content: [{
                            type: "text",
                            text: `üü¢ **–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!**\n\n` +
                                `üîå **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Revit:** ‚úÖ –ê–∫—Ç–∏–≤–Ω–æ\n` +
                                `üìÑ **–î–æ–∫—É–º–µ–Ω—Ç:** ${response.status.documentName}\n` +
                                `üïê **–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:** ${new Date(response.status.timestamp).toLocaleString('ru-RU')}\n` +
                                `üì¶ **–í–µ—Ä—Å–∏—è:** ${response.status.version}\n\n` +
                                `üöÄ **–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:** ${response.status.dynamicCommands?.enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n` +
                                `üíæ **–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:** ${response.status.dynamicCommands?.cachedCommands || 0}\n` +
                                `‚úÖ **–í–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:** ${response.status.dynamicCommands?.validCommands || 0}\n\n` +
                                `üéØ **–ì–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –ª—é–±—ã—Ö –∫–æ–º–∞–Ω–¥!**`
                        }]
                };
            }
            else {
                return {
                    content: [{
                            type: "text",
                            text: `üü° **–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º**\n\n‚ùå ${response.error}`
                        }]
                };
            }
        }
        catch (error) {
            return {
                content: [{
                        type: "text",
                        text: `üî¥ **Revit –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n` +
                            `‚ùó –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}\n\n` +
                            `üîß **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:**\n` +
                            `‚Ä¢ Revit –∑–∞–ø—É—â–µ–Ω\n` +
                            `‚Ä¢ –ü–ª–∞–≥–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω\n` +
                            `‚Ä¢ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω\n` +
                            `‚Ä¢ –ü–æ—Ä—Ç 3001 —Å–≤–æ–±–æ–¥–µ–Ω`
                    }]
            };
        }
    });
}
//# sourceMappingURL=smartRevitTools.js.map